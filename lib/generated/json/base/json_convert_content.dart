// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:SDZ/entity/adIntegral/ad_task_entity.dart';
import 'package:SDZ/generated/json/ad_task_entity.g.dart';
import 'package:SDZ/entity/base/empty_entity.dart';
import 'package:SDZ/generated/json/empty_entity.g.dart';
import 'package:SDZ/entity/global_entity.dart';
import 'package:SDZ/generated/json/global_entity.g.dart';
import 'package:SDZ/entity/home/telephone_bill_entity.dart';
import 'package:SDZ/generated/json/telephone_bill_entity.g.dart';
import 'package:SDZ/entity/jutuike/goods_entity.dart';
import 'package:SDZ/generated/json/goods_entity.g.dart';
import 'package:SDZ/entity/login/login_entity.dart';
import 'package:SDZ/generated/json/login_entity.g.dart';
import 'package:SDZ/entity/mime/ali_oss_entity.dart';
import 'package:SDZ/generated/json/ali_oss_entity.g.dart';
import 'package:SDZ/entity/mime/bank_entity.dart';
import 'package:SDZ/generated/json/bank_entity.g.dart';
import 'package:SDZ/entity/mime/base_info_entity.dart';
import 'package:SDZ/generated/json/base_info_entity.g.dart';
import 'package:SDZ/entity/mime/my_browse_record_entity.dart';
import 'package:SDZ/generated/json/my_browse_record_entity.g.dart';
import 'package:SDZ/entity/mime/my_collect_entity.dart';
import 'package:SDZ/generated/json/my_collect_entity.g.dart';
import 'package:SDZ/entity/mime/my_focus_talent_entity.dart';
import 'package:SDZ/generated/json/my_focus_talent_entity.g.dart';
import 'package:SDZ/entity/mime/pr_card_info_entity.dart';
import 'package:SDZ/generated/json/pr_card_info_entity.g.dart';
import 'package:SDZ/entity/mime/pr_list_skill_entity.dart';
import 'package:SDZ/generated/json/pr_list_skill_entity.g.dart';
import 'package:SDZ/entity/mime/user_center_entity.dart';
import 'package:SDZ/generated/json/user_center_entity.g.dart';
import 'package:SDZ/entity/new_message_entity.dart';
import 'package:SDZ/generated/json/new_message_entity.g.dart';
import 'package:SDZ/entity/notice/notice_entity.dart';
import 'package:SDZ/generated/json/notice_entity.g.dart';
import 'package:SDZ/entity/notice/notice_newest_msg_entity.dart';
import 'package:SDZ/generated/json/notice_newest_msg_entity.g.dart';
import 'package:SDZ/entity/notice_read_status_entity.dart';
import 'package:SDZ/generated/json/notice_read_status_entity.g.dart';
import 'package:SDZ/entity/search/card_entity.dart';
import 'package:SDZ/generated/json/card_entity.g.dart';
import 'package:SDZ/entity/search/talent_entity.dart';
import 'package:SDZ/generated/json/talent_entity.g.dart';
import 'package:SDZ/entity/sign/gift_list_entity.dart';
import 'package:SDZ/generated/json/gift_list_entity.g.dart';
import 'package:SDZ/entity/sign_info_entity.dart';
import 'package:SDZ/generated/json/sign_info_entity.g.dart';
import 'package:SDZ/entity/skill_entity.dart';
import 'package:SDZ/generated/json/skill_entity.g.dart';
import 'package:SDZ/entity/talent/q_r_code_entity.dart';
import 'package:SDZ/generated/json/q_r_code_entity.g.dart';
import 'package:SDZ/entity/waimai/activity_link_result_entity.dart';
import 'package:SDZ/generated/json/activity_link_result_entity.g.dart';
import 'package:SDZ/entity/waimai/goods_detail_entity.dart';
import 'package:SDZ/generated/json/goods_detail_entity.g.dart';
import 'package:SDZ/entity/waimai/goods_link_entity.dart';
import 'package:SDZ/generated/json/goods_link_entity.g.dart';
import 'package:SDZ/entity/waimai/waimai_entity.dart';
import 'package:SDZ/generated/json/waimai_entity.g.dart';
import 'package:SDZ/page/mime/entity/order_entity.dart';
import 'package:SDZ/generated/json/order_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (AdTaskEntity).toString()){
			return AdTaskEntity.fromJson(json) as M;
		}
		if(type == (EmptyEntity).toString()){
			return EmptyEntity.fromJson(json) as M;
		}
		if(type == (GlobalEntity).toString()){
			return GlobalEntity.fromJson(json) as M;
		}
		if(type == (TelephoneBillEntity).toString()){
			return TelephoneBillEntity.fromJson(json) as M;
		}
		if(type == (GoodsEntity).toString()){
			return GoodsEntity.fromJson(json) as M;
		}
		if(type == (LoginEntity).toString()){
			return LoginEntity.fromJson(json) as M;
		}
		if(type == (AliOssEntity).toString()){
			return AliOssEntity.fromJson(json) as M;
		}
		if(type == (BankEntity).toString()){
			return BankEntity.fromJson(json) as M;
		}
		if(type == (BaseInfoEntity).toString()){
			return BaseInfoEntity.fromJson(json) as M;
		}
		if(type == (MyBrowseRecordEntity).toString()){
			return MyBrowseRecordEntity.fromJson(json) as M;
		}
		if(type == (MyBrowseRecordSkillTagList).toString()){
			return MyBrowseRecordSkillTagList.fromJson(json) as M;
		}
		if(type == (MyCollectEntity).toString()){
			return MyCollectEntity.fromJson(json) as M;
		}
		if(type == (MyCollectSkillTagList).toString()){
			return MyCollectSkillTagList.fromJson(json) as M;
		}
		if(type == (CardWoksList).toString()){
			return CardWoksList.fromJson(json) as M;
		}
		if(type == (MyFocusTalentEntity).toString()){
			return MyFocusTalentEntity.fromJson(json) as M;
		}
		if(type == (MyFocusTalentSkillTagList).toString()){
			return MyFocusTalentSkillTagList.fromJson(json) as M;
		}
		if(type == (MyFocusTalentCardList).toString()){
			return MyFocusTalentCardList.fromJson(json) as M;
		}
		if(type == (PrCardInfoEntity).toString()){
			return PrCardInfoEntity.fromJson(json) as M;
		}
		if(type == (PrCardInfoSkills).toString()){
			return PrCardInfoSkills.fromJson(json) as M;
		}
		if(type == (PrListSkillEntity).toString()){
			return PrListSkillEntity.fromJson(json) as M;
		}
		if(type == (UserCenterEntity).toString()){
			return UserCenterEntity.fromJson(json) as M;
		}
		if(type == (UserCenterCardInfoList).toString()){
			return UserCenterCardInfoList.fromJson(json) as M;
		}
		if(type == (NewMessageEntity).toString()){
			return NewMessageEntity.fromJson(json) as M;
		}
		if(type == (NoticeEntity).toString()){
			return NoticeEntity.fromJson(json) as M;
		}
		if(type == (NoticeItemEntity).toString()){
			return NoticeItemEntity.fromJson(json) as M;
		}
		if(type == (NoticeNewestMsgEntity).toString()){
			return NoticeNewestMsgEntity.fromJson(json) as M;
		}
		if(type == (NoticeReadStatusEntity).toString()){
			return NoticeReadStatusEntity.fromJson(json) as M;
		}
		if(type == (CardEntity).toString()){
			return CardEntity.fromJson(json) as M;
		}
		if(type == (CardItemEntity).toString()){
			return CardItemEntity.fromJson(json) as M;
		}
		if(type == (SkillTagItemEntity).toString()){
			return SkillTagItemEntity.fromJson(json) as M;
		}
		if(type == (TalentEntity).toString()){
			return TalentEntity.fromJson(json) as M;
		}
		if(type == (TalentCard).toString()){
			return TalentCard.fromJson(json) as M;
		}
		if(type == (TalentSkill).toString()){
			return TalentSkill.fromJson(json) as M;
		}
		if(type == (GiftListEntity).toString()){
			return GiftListEntity.fromJson(json) as M;
		}
		if(type == (GiftEntity).toString()){
			return GiftEntity.fromJson(json) as M;
		}
		if(type == (SignInfoEntity).toString()){
			return SignInfoEntity.fromJson(json) as M;
		}
		if(type == (SignInfoUser).toString()){
			return SignInfoUser.fromJson(json) as M;
		}
		if(type == (SignInfoUserParent).toString()){
			return SignInfoUserParent.fromJson(json) as M;
		}
		if(type == (SignInfoSigned).toString()){
			return SignInfoSigned.fromJson(json) as M;
		}
		if(type == (SignInfoSignedProduct).toString()){
			return SignInfoSignedProduct.fromJson(json) as M;
		}
		if(type == (SkillEntity).toString()){
			return SkillEntity.fromJson(json) as M;
		}
		if(type == (QRCodeEntity).toString()){
			return QRCodeEntity.fromJson(json) as M;
		}
		if(type == (ActivityLinkResultEntity).toString()){
			return ActivityLinkResultEntity.fromJson(json) as M;
		}
		if(type == (GoodsDetailEntity).toString()){
			return GoodsDetailEntity.fromJson(json) as M;
		}
		if(type == (GoodsLinkEntity).toString()){
			return GoodsLinkEntity.fromJson(json) as M;
		}
		if(type == (GoodsLinkCouponInfo).toString()){
			return GoodsLinkCouponInfo.fromJson(json) as M;
		}
		if(type == (GoodsLinkWeAppInfo).toString()){
			return GoodsLinkWeAppInfo.fromJson(json) as M;
		}
		if(type == (WaimaiEntity).toString()){
			return WaimaiEntity.fromJson(json) as M;
		}
		if(type == (OrderEntity).toString()){
			return OrderEntity.fromJson(json) as M;
		}
		if(type == (OrderList).toString()){
			return OrderList.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AdTaskEntity>[] is M){
			return data.map<AdTaskEntity>((Map<String, dynamic> e) => AdTaskEntity.fromJson(e)).toList() as M;
		}
		if(<EmptyEntity>[] is M){
			return data.map<EmptyEntity>((Map<String, dynamic> e) => EmptyEntity.fromJson(e)).toList() as M;
		}
		if(<GlobalEntity>[] is M){
			return data.map<GlobalEntity>((Map<String, dynamic> e) => GlobalEntity.fromJson(e)).toList() as M;
		}
		if(<TelephoneBillEntity>[] is M){
			return data.map<TelephoneBillEntity>((Map<String, dynamic> e) => TelephoneBillEntity.fromJson(e)).toList() as M;
		}
		if(<GoodsEntity>[] is M){
			return data.map<GoodsEntity>((Map<String, dynamic> e) => GoodsEntity.fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
		}
		if(<AliOssEntity>[] is M){
			return data.map<AliOssEntity>((Map<String, dynamic> e) => AliOssEntity.fromJson(e)).toList() as M;
		}
		if(<BankEntity>[] is M){
			return data.map<BankEntity>((Map<String, dynamic> e) => BankEntity.fromJson(e)).toList() as M;
		}
		if(<BaseInfoEntity>[] is M){
			return data.map<BaseInfoEntity>((Map<String, dynamic> e) => BaseInfoEntity.fromJson(e)).toList() as M;
		}
		if(<MyBrowseRecordEntity>[] is M){
			return data.map<MyBrowseRecordEntity>((Map<String, dynamic> e) => MyBrowseRecordEntity.fromJson(e)).toList() as M;
		}
		if(<MyBrowseRecordSkillTagList>[] is M){
			return data.map<MyBrowseRecordSkillTagList>((Map<String, dynamic> e) => MyBrowseRecordSkillTagList.fromJson(e)).toList() as M;
		}
		if(<MyCollectEntity>[] is M){
			return data.map<MyCollectEntity>((Map<String, dynamic> e) => MyCollectEntity.fromJson(e)).toList() as M;
		}
		if(<MyCollectSkillTagList>[] is M){
			return data.map<MyCollectSkillTagList>((Map<String, dynamic> e) => MyCollectSkillTagList.fromJson(e)).toList() as M;
		}
		if(<CardWoksList>[] is M){
			return data.map<CardWoksList>((Map<String, dynamic> e) => CardWoksList.fromJson(e)).toList() as M;
		}
		if(<MyFocusTalentEntity>[] is M){
			return data.map<MyFocusTalentEntity>((Map<String, dynamic> e) => MyFocusTalentEntity.fromJson(e)).toList() as M;
		}
		if(<MyFocusTalentSkillTagList>[] is M){
			return data.map<MyFocusTalentSkillTagList>((Map<String, dynamic> e) => MyFocusTalentSkillTagList.fromJson(e)).toList() as M;
		}
		if(<MyFocusTalentCardList>[] is M){
			return data.map<MyFocusTalentCardList>((Map<String, dynamic> e) => MyFocusTalentCardList.fromJson(e)).toList() as M;
		}
		if(<PrCardInfoEntity>[] is M){
			return data.map<PrCardInfoEntity>((Map<String, dynamic> e) => PrCardInfoEntity.fromJson(e)).toList() as M;
		}
		if(<PrCardInfoSkills>[] is M){
			return data.map<PrCardInfoSkills>((Map<String, dynamic> e) => PrCardInfoSkills.fromJson(e)).toList() as M;
		}
		if(<PrListSkillEntity>[] is M){
			return data.map<PrListSkillEntity>((Map<String, dynamic> e) => PrListSkillEntity.fromJson(e)).toList() as M;
		}
		if(<UserCenterEntity>[] is M){
			return data.map<UserCenterEntity>((Map<String, dynamic> e) => UserCenterEntity.fromJson(e)).toList() as M;
		}
		if(<UserCenterCardInfoList>[] is M){
			return data.map<UserCenterCardInfoList>((Map<String, dynamic> e) => UserCenterCardInfoList.fromJson(e)).toList() as M;
		}
		if(<NewMessageEntity>[] is M){
			return data.map<NewMessageEntity>((Map<String, dynamic> e) => NewMessageEntity.fromJson(e)).toList() as M;
		}
		if(<NoticeEntity>[] is M){
			return data.map<NoticeEntity>((Map<String, dynamic> e) => NoticeEntity.fromJson(e)).toList() as M;
		}
		if(<NoticeItemEntity>[] is M){
			return data.map<NoticeItemEntity>((Map<String, dynamic> e) => NoticeItemEntity.fromJson(e)).toList() as M;
		}
		if(<NoticeNewestMsgEntity>[] is M){
			return data.map<NoticeNewestMsgEntity>((Map<String, dynamic> e) => NoticeNewestMsgEntity.fromJson(e)).toList() as M;
		}
		if(<NoticeReadStatusEntity>[] is M){
			return data.map<NoticeReadStatusEntity>((Map<String, dynamic> e) => NoticeReadStatusEntity.fromJson(e)).toList() as M;
		}
		if(<CardEntity>[] is M){
			return data.map<CardEntity>((Map<String, dynamic> e) => CardEntity.fromJson(e)).toList() as M;
		}
		if(<CardItemEntity>[] is M){
			return data.map<CardItemEntity>((Map<String, dynamic> e) => CardItemEntity.fromJson(e)).toList() as M;
		}
		if(<SkillTagItemEntity>[] is M){
			return data.map<SkillTagItemEntity>((Map<String, dynamic> e) => SkillTagItemEntity.fromJson(e)).toList() as M;
		}
		if(<TalentEntity>[] is M){
			return data.map<TalentEntity>((Map<String, dynamic> e) => TalentEntity.fromJson(e)).toList() as M;
		}
		if(<TalentCard>[] is M){
			return data.map<TalentCard>((Map<String, dynamic> e) => TalentCard.fromJson(e)).toList() as M;
		}
		if(<TalentSkill>[] is M){
			return data.map<TalentSkill>((Map<String, dynamic> e) => TalentSkill.fromJson(e)).toList() as M;
		}
		if(<GiftListEntity>[] is M){
			return data.map<GiftListEntity>((Map<String, dynamic> e) => GiftListEntity.fromJson(e)).toList() as M;
		}
		if(<GiftEntity>[] is M){
			return data.map<GiftEntity>((Map<String, dynamic> e) => GiftEntity.fromJson(e)).toList() as M;
		}
		if(<SignInfoEntity>[] is M){
			return data.map<SignInfoEntity>((Map<String, dynamic> e) => SignInfoEntity.fromJson(e)).toList() as M;
		}
		if(<SignInfoUser>[] is M){
			return data.map<SignInfoUser>((Map<String, dynamic> e) => SignInfoUser.fromJson(e)).toList() as M;
		}
		if(<SignInfoUserParent>[] is M){
			return data.map<SignInfoUserParent>((Map<String, dynamic> e) => SignInfoUserParent.fromJson(e)).toList() as M;
		}
		if(<SignInfoSigned>[] is M){
			return data.map<SignInfoSigned>((Map<String, dynamic> e) => SignInfoSigned.fromJson(e)).toList() as M;
		}
		if(<SignInfoSignedProduct>[] is M){
			return data.map<SignInfoSignedProduct>((Map<String, dynamic> e) => SignInfoSignedProduct.fromJson(e)).toList() as M;
		}
		if(<SkillEntity>[] is M){
			return data.map<SkillEntity>((Map<String, dynamic> e) => SkillEntity.fromJson(e)).toList() as M;
		}
		if(<QRCodeEntity>[] is M){
			return data.map<QRCodeEntity>((Map<String, dynamic> e) => QRCodeEntity.fromJson(e)).toList() as M;
		}
		if(<ActivityLinkResultEntity>[] is M){
			return data.map<ActivityLinkResultEntity>((Map<String, dynamic> e) => ActivityLinkResultEntity.fromJson(e)).toList() as M;
		}
		if(<GoodsDetailEntity>[] is M){
			return data.map<GoodsDetailEntity>((Map<String, dynamic> e) => GoodsDetailEntity.fromJson(e)).toList() as M;
		}
		if(<GoodsLinkEntity>[] is M){
			return data.map<GoodsLinkEntity>((Map<String, dynamic> e) => GoodsLinkEntity.fromJson(e)).toList() as M;
		}
		if(<GoodsLinkCouponInfo>[] is M){
			return data.map<GoodsLinkCouponInfo>((Map<String, dynamic> e) => GoodsLinkCouponInfo.fromJson(e)).toList() as M;
		}
		if(<GoodsLinkWeAppInfo>[] is M){
			return data.map<GoodsLinkWeAppInfo>((Map<String, dynamic> e) => GoodsLinkWeAppInfo.fromJson(e)).toList() as M;
		}
		if(<WaimaiEntity>[] is M){
			return data.map<WaimaiEntity>((Map<String, dynamic> e) => WaimaiEntity.fromJson(e)).toList() as M;
		}
		if(<OrderEntity>[] is M){
			return data.map<OrderEntity>((Map<String, dynamic> e) => OrderEntity.fromJson(e)).toList() as M;
		}
		if(<OrderList>[] is M){
			return data.map<OrderList>((Map<String, dynamic> e) => OrderList.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}